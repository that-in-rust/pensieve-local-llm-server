#!/bin/bash
# Pensieve Server Management Script
#
# Usage:
#   ./pensieve-server start    # Start the server
#   ./pensieve-server stop     # Stop the server
#   ./pensieve-server restart  # Restart the server
#   ./pensieve-server status   # Check server status

set -e

PROJECT_DIR="/Users/amuldotexe/Projects/pensieve-local-llm-server"
MODEL_PATH="$PROJECT_DIR/models/Phi-3-mini-128k-instruct-4bit/model.safetensors"
BINARY="$PROJECT_DIR/target/debug/pensieve"
PORT=7777
PID_FILE="/tmp/pensieve-server.pid"
LOG_FILE="/tmp/pensieve-server.log"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to check if server is running
is_running() {
    if [ -f "$PID_FILE" ]; then
        PID=$(cat "$PID_FILE")
        if ps -p "$PID" > /dev/null 2>&1; then
            return 0  # Running
        else
            rm -f "$PID_FILE"  # Stale PID file
            return 1  # Not running
        fi
    fi
    return 1  # Not running
}

# Function to get process using port 7777
get_port_process() {
    lsof -ti:$PORT 2>/dev/null || true
}

# Function to start server
start_server() {
    # Check if already running via PID file
    if is_running; then
        echo -e "${YELLOW}‚ö†Ô∏è  Server is already running (PID: $(cat $PID_FILE))${NC}"
        echo -e "${BLUE}‚ÑπÔ∏è  Use 'pensieve-server status' to check, or 'pensieve-server restart' to restart${NC}"
        return 0
    fi

    # Check if port is in use by another process
    PORT_PID=$(get_port_process)
    if [ ! -z "$PORT_PID" ]; then
        echo -e "${RED}‚ùå Port $PORT is already in use by process $PORT_PID${NC}"
        echo -e "${YELLOW}üí° Run 'pensieve-server stop' to clean up, or kill the process manually:${NC}"
        echo -e "   kill $PORT_PID"
        return 1
    fi

    # Check if binary exists
    if [ ! -f "$BINARY" ]; then
        echo -e "${RED}‚ùå Pensieve binary not found at: $BINARY${NC}"
        echo -e "${YELLOW}üí° Run: cargo build --workspace${NC}"
        return 1
    fi

    # Check if model exists
    if [ ! -f "$MODEL_PATH" ]; then
        echo -e "${RED}‚ùå Model file not found at: $MODEL_PATH${NC}"
        return 1
    fi

    echo -e "${BLUE}üöÄ Starting Pensieve server...${NC}"
    echo -e "${BLUE}üìù Model: $MODEL_PATH${NC}"
    echo -e "${BLUE}üìä Logs: $LOG_FILE${NC}"
    echo ""

    # Start server in background
    nohup "$BINARY" start --model "$MODEL_PATH" > "$LOG_FILE" 2>&1 &
    SERVER_PID=$!
    echo $SERVER_PID > "$PID_FILE"

    # Wait a moment and check if it started successfully
    sleep 2

    if is_running; then
        # Test health endpoint
        if curl -s http://127.0.0.1:$PORT/health > /dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ Server started successfully on 127.0.0.1:$PORT (PID: $SERVER_PID)${NC}"
            echo -e "${GREEN}‚úÖ Health check: PASSED${NC}"
            echo ""
            echo -e "${BLUE}üìö Next steps:${NC}"
            echo -e "   ${BLUE}‚Ä¢${NC} Test: curl http://127.0.0.1:$PORT/health"
            echo -e "   ${BLUE}‚Ä¢${NC} Use with Claude: ${GREEN}claude-local${NC}"
            echo -e "   ${BLUE}‚Ä¢${NC} View logs: tail -f $LOG_FILE"
            echo -e "   ${BLUE}‚Ä¢${NC} Stop server: pensieve-server stop"
            return 0
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Server started but health check failed${NC}"
            echo -e "${YELLOW}üí° Check logs: tail -f $LOG_FILE${NC}"
            return 1
        fi
    else
        echo -e "${RED}‚ùå Server failed to start${NC}"
        echo -e "${YELLOW}üí° Check logs: cat $LOG_FILE${NC}"
        rm -f "$PID_FILE"
        return 1
    fi
}

# Function to stop server
stop_server() {
    # First, check PID file
    if is_running; then
        PID=$(cat "$PID_FILE")
        echo -e "${BLUE}üõë Stopping Pensieve server (PID: $PID)...${NC}"
        kill $PID 2>/dev/null || true
        sleep 1

        # Force kill if still running
        if ps -p "$PID" > /dev/null 2>&1; then
            echo -e "${YELLOW}‚ö†Ô∏è  Process didn't stop gracefully, force killing...${NC}"
            kill -9 $PID 2>/dev/null || true
        fi

        rm -f "$PID_FILE"
        echo -e "${GREEN}‚úÖ Server stopped${NC}"
    else
        # Check if something else is on the port
        PORT_PID=$(get_port_process)
        if [ ! -z "$PORT_PID" ]; then
            echo -e "${YELLOW}‚ö†Ô∏è  No PID file found, but port $PORT is in use by process $PORT_PID${NC}"
            read -p "Kill this process? (y/n) " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                kill $PORT_PID 2>/dev/null || true
                sleep 1
                if ps -p "$PORT_PID" > /dev/null 2>&1; then
                    kill -9 $PORT_PID 2>/dev/null || true
                fi
                echo -e "${GREEN}‚úÖ Process killed${NC}"
            fi
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Server is not running${NC}"
        fi
    fi
}

# Function to show status
show_status() {
    echo -e "${BLUE}üìä Pensieve Server Status${NC}"
    echo ""

    if is_running; then
        PID=$(cat "$PID_FILE")
        echo -e "${GREEN}‚úÖ Server is RUNNING${NC}"
        echo -e "   ${BLUE}‚Ä¢${NC} PID: $PID"
        echo -e "   ${BLUE}‚Ä¢${NC} Port: $PORT"

        # Check health endpoint
        if curl -s http://127.0.0.1:$PORT/health > /dev/null 2>&1; then
            echo -e "   ${BLUE}‚Ä¢${NC} Health: ${GREEN}HEALTHY${NC}"
        else
            echo -e "   ${BLUE}‚Ä¢${NC} Health: ${RED}UNHEALTHY${NC}"
        fi

        # Show memory usage
        MEM=$(ps -p $PID -o rss= 2>/dev/null | awk '{printf "%.1f MB", $1/1024}')
        echo -e "   ${BLUE}‚Ä¢${NC} Memory: $MEM"

        echo ""
        echo -e "${BLUE}üí° Logs:${NC} tail -f $LOG_FILE"
    else
        PORT_PID=$(get_port_process)
        if [ ! -z "$PORT_PID" ]; then
            echo -e "${YELLOW}‚ö†Ô∏è  Server is NOT running, but port $PORT is in use by PID $PORT_PID${NC}"
            echo -e "${YELLOW}üí° Run 'pensieve-server stop' to clean up${NC}"
        else
            echo -e "${RED}‚ùå Server is NOT running${NC}"
            echo -e "${BLUE}üí° Start with: pensieve-server start${NC}"
        fi
    fi
}

# Main command dispatcher
case "${1:-}" in
    start)
        start_server
        ;;
    stop)
        stop_server
        ;;
    restart)
        echo -e "${BLUE}üîÑ Restarting Pensieve server...${NC}"
        stop_server
        sleep 1
        start_server
        ;;
    status)
        show_status
        ;;
    logs)
        if [ -f "$LOG_FILE" ]; then
            tail -f "$LOG_FILE"
        else
            echo -e "${RED}‚ùå Log file not found: $LOG_FILE${NC}"
        fi
        ;;
    *)
        echo "Pensieve Server Management"
        echo ""
        echo "Usage: $0 {start|stop|restart|status|logs}"
        echo ""
        echo "Commands:"
        echo "  start    - Start the Pensieve server"
        echo "  stop     - Stop the Pensieve server"
        echo "  restart  - Restart the Pensieve server"
        echo "  status   - Show server status"
        echo "  logs     - Tail server logs"
        exit 1
        ;;
esac
